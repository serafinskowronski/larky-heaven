{
  "version": 3,
  "sources": ["../../vuetify/src/composables/dimensions.ts", "../../vuetify/src/composables/border.ts"],
  "sourcesContent": ["// Utilities\nimport { computed } from 'vue'\nimport { convertToUnit, propsFactory } from '@/util'\n\n// Types\nexport interface DimensionProps {\n  height?: number | string\n  maxHeight?: number | string\n  maxWidth?: number | string\n  minHeight?: number | string\n  minWidth?: number | string\n  width?: number | string\n}\n\n// Composables\nexport const makeDimensionProps = propsFactory({\n  height: [Number, String],\n  maxHeight: [Number, String],\n  maxWidth: [Number, String],\n  minHeight: [Number, String],\n  minWidth: [Number, String],\n  width: [Number, String],\n}, 'dimension')\n\nexport function useDimension (props: DimensionProps) {\n  const dimensionStyles = computed(() => ({\n    height: convertToUnit(props.height),\n    maxHeight: convertToUnit(props.maxHeight),\n    maxWidth: convertToUnit(props.maxWidth),\n    minHeight: convertToUnit(props.minHeight),\n    minWidth: convertToUnit(props.minWidth),\n    width: convertToUnit(props.width),\n  }))\n\n  return { dimensionStyles }\n}\n", "// Utilities\nimport { computed, isRef } from 'vue'\nimport { getCurrentInstanceName, propsFactory } from '@/util'\n\n// Types\nexport interface BorderProps {\n  border?: boolean | number | string\n}\n\n// Composables\nexport const makeBorderProps = propsFactory({\n  border: [Boolean, Number, String],\n}, 'border')\n\nexport function useBorder (\n  props: BorderProps,\n  name = getCurrentInstanceName(),\n) {\n  const borderClasses = computed(() => {\n    const border = isRef(props) ? props.value : props.border\n    const classes: string[] = []\n\n    if (border === true || border === '') {\n      classes.push(`${name}--border`)\n    } else if (\n      typeof border === 'string' ||\n      border === 0\n    ) {\n      for (const value of String(border).split(' ')) {\n        classes.push(`border-${value}`)\n      }\n    }\n\n    return classes\n  })\n\n  return { borderClasses }\n}\n"],
  "mappings": ";;;;;;;;;;;AAeO,IAAMA,qBAAqBC,aAAa;EAC7CC,QAAQ,CAACC,QAAQC,MAAM;EACvBC,WAAW,CAACF,QAAQC,MAAM;EAC1BE,UAAU,CAACH,QAAQC,MAAM;EACzBG,WAAW,CAACJ,QAAQC,MAAM;EAC1BI,UAAU,CAACL,QAAQC,MAAM;EACzBK,OAAO,CAACN,QAAQC,MAAM;AACxB,GAAG,WAAW;AAEP,SAASM,aAAcC,OAAuB;AACnD,QAAMC,kBAAkBC,SAAS,OAAO;IACtCX,QAAQY,cAAcH,MAAMT,MAAM;IAClCG,WAAWS,cAAcH,MAAMN,SAAS;IACxCC,UAAUQ,cAAcH,MAAML,QAAQ;IACtCC,WAAWO,cAAcH,MAAMJ,SAAS;IACxCC,UAAUM,cAAcH,MAAMH,QAAQ;IACtCC,OAAOK,cAAcH,MAAMF,KAAK;EAClC,EAAE;AAEF,SAAO;IAAEG;EAAgB;AAC3B;;;ACzBO,IAAMG,kBAAkBC,aAAa;EAC1CC,QAAQ,CAACC,SAASC,QAAQC,MAAM;AAClC,GAAG,QAAQ;AAEJ,SAASC,UACdC,OAEA;AAAA,MADAC,OAAIC,UAAAC,SAAA,KAAAD,UAAA,CAAA,MAAAE,SAAAF,UAAA,CAAA,IAAGG,uBAAsB;AAE7B,QAAMC,gBAAgBC,SAAS,MAAM;AACnC,UAAMZ,SAASa,MAAMR,KAAK,IAAIA,MAAMS,QAAQT,MAAML;AAClD,UAAMe,UAAoB,CAAA;AAE1B,QAAIf,WAAW,QAAQA,WAAW,IAAI;AACpCe,cAAQC,KAAM,GAAEV,cAAc;IAChC,WACE,OAAON,WAAW,YAClBA,WAAW,GACX;AACA,iBAAWc,SAASX,OAAOH,MAAM,EAAEiB,MAAM,GAAG,GAAG;AAC7CF,gBAAQC,KAAM,UAASF,OAAO;MAChC;IACF;AAEA,WAAOC;EACT,CAAC;AAED,SAAO;IAAEJ;EAAc;AACzB;",
  "names": ["makeDimensionProps", "propsFactory", "height", "Number", "String", "maxHeight", "maxWidth", "minHeight", "minWidth", "width", "useDimension", "props", "dimensionStyles", "computed", "convertToUnit", "makeBorderProps", "propsFactory", "border", "Boolean", "Number", "String", "useBorder", "props", "name", "arguments", "length", "undefined", "getCurrentInstanceName", "borderClasses", "computed", "isRef", "value", "classes", "push", "split"]
}
